#!/usr/bin/env python3

"""
Run this command inside a git repo dir, and give the name of another host that has a matching git repo dir.
This command will sync all non-ignored content to that git repo dir without touching your local state.

This is similar to rsync, but uses pure git operations including a behind-the-scenes `git commit-tree`
and `git push` directly into the .git directory of the remote repo.
Then a few shell commands later, the behind-the-scenes commit is checked out into the remote working tree.

This requires 2 consecutive ssh connections: one for `git push`, and one for the shell commands to checkout the commit.

When submodules are involved, and additional ssh connection will be made for each submodule.
This program cannot synchronize changes to the existence or identities of submodules.
For example, changing the url, changing the checkout path, changing the name (which is different from the path),
or initializing or deinitializing a submodule will all cause undefined behavior in this script.
(And don't even think about creating two unrelated submodules with the same name in a repo over multiple commits.)
"""

import os, sys, subprocess
import re, shlex

verbose = False
dry_run = False

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("remote", metavar="{host[:path]|path}", help=
        "The remote host and/or the path to the destination repository. "
        "The host, if given, must be usable by ssh, and must only contain [A-Za-z0-9-] characters, "
        "which means you probably need an alias in .ssh/config for it. "
        "If host is given and path is omitted, "
        "the default path is either the absolute path of the current repo's toplevel dir, "
        "or if the current repo is in the current user's home directory, "
        "then the default path is the home-relative path; "
        "i.e. ~/some/path will be translated as ~/some/path on the remote, "
        "even if ~ expands to a different path in the two locations. "
        "If no host is specified, the path must contain '/' and be a directory on the local machine.")

    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("--dry-run", action="store_true", help=
        "Don't actually execute any of the commands that cause observable change.")
    parser.add_argument("-e", "--eval", action="append", help=
        "Evaluate shell program(s) on the remote after a successful sync. "
        "Synchronization always requires an ssh connection to run "
        "`git reset` and other commands on the remote. "
        "This command line parameter allows you to append your own shell programs to the script. "
        "The script will be fed as stdin to the remote shell, "
        "which means you don't need any extra escaping "
        "(that would be necessary in a context like `ssh host <script>`), "
        "and you don't have access to read from stdin in your script. "
        "Multiple scripts given with this command line parameter will be separated by newlines. "
        "No validation is done on the scripts given; use this feature at your own risk. "
        "TIP: use --verbose and/or --dry-run to see the final formatted script that will be run on the remote.")

    args = parser.parse_args()

    if args.verbose:
        global verbose
        verbose = True
    if args.dry_run:
        global dry_run
        dry_run = True

    repo_root = git("rev-parse", "--show-toplevel", cwd=None, mode="single_line")

    # parse host:path
    if ":" in args.remote:
        host, path = args.remote.split(":", 1)
        shell_safe_path = shlex.quote(path)
    elif "/" in args.remote:
        host = None
        path = os.path.abspath(args.remote)
        shell_safe_path = shlex.quote(path)
    else:
        host = args.remote
        # infer default path.
        home_relative_dir = relpath_down(repo_root, os.path.expanduser("~"))
        if home_relative_dir != None:
            path = os.path.join("~", home_relative_dir)
            # leave the ~ outside the quote so it still works.
            shell_safe_path = os.path.join("~", shlex.quote(home_relative_dir))
        else:
            path = repo_root
            shell_safe_path = shlex.quote(path)
    shell_safe_path = shell_safe_path.encode("utf8")

    if host != None:
        assert re.match(r"^[A-Za-z0-9.-]+$", host) != None, repr(host)
        remote = "{}:{}".format(host, path)
    else:
        remote = path

    # how many submodules we dealing with?
    submodule_paths = git("submodule", "foreach",
        "--quiet", "--recursive",
        "echo $displaypath",
        cwd=repo_root, mode="newline_terminated_bytes")
    submodule_path_set = set(submodule_paths)
    all_module_paths = [b"."] + submodule_paths
    # reverse order processes children before parents
    all_module_paths.reverse()

    module_commit_sha1s = {}
    for module_path in all_module_paths:
        module_dir = os.path.join(repo_root, module_path.decode("utf8"))

        # what's changed from head?
        head_commit_sha1 = git("rev-parse", "--verify", "HEAD", cwd=module_dir, mode="single_line_bytes")
        status_lines = [
            line for line in git("status",
                "--no-renames", "--untracked-files=all", "-z",
                cwd=module_dir, mode="null_terminated_bytes")
            if line[len(b"?? "):] not in submodule_path_set
        ]

        # what commit should we use?
        if len(status_lines) == 0:
            commit_sha1 = head_commit_sha1
        else:
            commit_sha1 = make_ephemeral_commit(module_dir, module_path, head_commit_sha1, status_lines, module_commit_sha1s)
        module_commit_sha1s[module_path] = commit_sha1

        # git push
        secret_ref = "refs/git-push-working-tree/SYNC_HEAD"
        maybe_quiet = ["-q"]
        if verbose:
            maybe_quiet = []
        git("push",
            "--force",
            os.path.join(remote, module_path.decode("utf8")),
            "{}:{}".format(commit_sha1.decode("utf8"), secret_ref),
            *maybe_quiet,
            cwd=module_dir, mode="mutating")

    # use the commits.
    remote_script_parts = []
    for module_path in all_module_paths:
        def encode_git_cmd(*args, use_root_git_dir=False):
            cmd = [b"git"]
            if module_path == b".":
                cmd.extend([b"-C", shell_safe_path])
            else:
                cmd.extend([b"-C", os.path.join(shell_safe_path, module_path)])
            cmd.extend(args)
            return b" ".join(cmd)
        commit_sha1 = module_commit_sha1s[module_path]
        module_script = b"".join(
            line + b"\n" for line in [
                encode_git_cmd(b"reset", b"--quiet", commit_sha1, use_root_git_dir=True),
                encode_git_cmd(b"reset", b"--hard", b"--quiet", commit_sha1),
                encode_git_cmd(b"clean", b"-ffd"),
            ]
        )
        remote_script_parts.append(module_script)
    for script in args.eval or []:
        remote_script_parts.append(script.encode("utf8"))

    remote_script = b"\n".join([
        b"set -e\n",
    ] + remote_script_parts)

    if host != None:
        # ssh
        if verbose:
            if dry_run:
                print("\nwould run on the remote: {\n")
            else:
                print("\nrunning on the remote: {\n")
            print(remote_script.decode("utf8"))
            print("}")
        if not dry_run:
            subprocess.run(["ssh", host, "/usr/bin/env", "sh"], input=remote_script, check=True)
    else:
        # local
        if verbose:
            if dry_run:
                print("\nwould run: {\n")
            else:
                print("\nrunning: {\n")
            print(remote_script.decode("utf8"))
            print("}")
        if not dry_run:
            subprocess.run(["/usr/bin/env", "sh"], input=remote_script, check=True)

def make_ephemeral_commit(module_dir, module_path, head_commit_sha1, status_lines, module_commit_sha1s):
    # What deviates from HEAD?
    deleted_paths = set()
    modified_paths = [] # or added
    for status_line in status_lines:
        # XY PATH
        # e.g: "?? git-push-working-tree"
        path = re.match(rb"^.. (.*)$", status_line).group(1)
        if os.path.exists(os.path.join(module_dir, path.decode("utf8"))):
            modified_paths.append(path)
        else:
            deleted_paths.add(path)
    modified_paths_set = set(modified_paths)

    # What we're making:
    tree_path_to_object_list = {
        # b"": [ # root tree
        #     b"040000 tree 322deb411efb0bda27a29d08ca9b7fb600f249e3\ta",
        #     b"100644 blob 322deb411efb0bda27a29d08ca9b7fb600f249e3\tREADME.md,
        # ],
        # b"a": [ # subdirectory "a/"
        #     b"100644 blob 322deb411efb0bda27a29d08ca9b7fb600f249e3\tfile.txt",
        # ],
    }
    depth_to_tree_paths = {
        # 0: [b""], # only the root is depth 0,
        # 1: [b"a", ...],
    }
    def add_object_to_parent_tree(parent_path, ls_tree_line):
        try:
            tree_path_to_object_list[parent_path].append(ls_tree_line)
            return
        except KeyError:
            pass
        # This is the first time we've seen this parent_path.
        object_list = tree_path_to_object_list[parent_path] = []
        object_list.append(ls_tree_line)

        # Index the parent_path in our tree index.
        if parent_path == b"":
            depth = 0
        else:
            depth = len(parent_path.split(b"/"))
        if depth not in depth_to_tree_paths:
            depth_to_tree_paths[depth] = []
        depth_to_tree_paths[depth].append(parent_path)

    # Store all modified files in the .git directory and get a sha1 to point to each one.
    # This will probably create objects in the .git directory.
    modified_path_sha1s = git("hash-object",
        "-t", "blob", "-w",
        *modified_paths,
        cwd=module_dir, mode="newline_terminated_bytes")
    for path, sha1 in zip(modified_paths, modified_path_sha1s):
        ls_tree_line = b"%b %b %b\t%b" % (
            (b"100755" if os.access(os.path.join(module_dir, path.decode("utf8")), os.X_OK) else b"100644"), # mode
            b"blob", # type
            sha1, # sha1
            os.path.basename(path), # name
        )
        add_object_to_parent_tree(os.path.dirname(path), ls_tree_line)

    # Fill in everything that's unchanged from the HEAD tree.
    ls_tree_lines = git("ls-tree",
        "-r", "--full-tree", "-z",
        head_commit_sha1.decode("utf8"),
        cwd=module_dir, mode="null_terminated_bytes")
    for ls_tree_line in ls_tree_lines:
        # <mode> SP <type> SP <object> TAB <file>
        # e.g: 100644 blob 322deb411efb0bda27a29d08ca9b7fb600f249e3	README.md
        (mode, type_, sha1, path) = re.match(rb"^(\S*) (\S*) (\S*)\t(.*)$", ls_tree_line).groups()
        if type_ == b"commit":
            # this is a submodule
            super_submodule_path = os.path.normpath(os.path.join(module_path, path))
            sha1 = module_commit_sha1s[super_submodule_path]
        if path in deleted_paths:
            # omit deleted items.
            continue
        if path in modified_paths_set:
            # already accounted for.
            continue
        # strip the directory part of the path for the ls_tree_line.
        ls_tree_line = b"%s %s %s\t%s" % (mode, type_, sha1, os.path.basename(path))
        add_object_to_parent_tree(os.path.dirname(path), ls_tree_line)

    # Construct a new root tree by iterating from the depths upward.
    for depth in range(max(depth_to_tree_paths.keys()), -1, -1):
        tree_paths = depth_to_tree_paths[depth]
        tree_sha1s = git("mktree",
            "-z", "--batch",
            input=b"".join(
                b"".join(
                    ls_tree_line + b"\x00"
                    for ls_tree_line in tree_path_to_object_list[tree_path]
                ) + b"\x00"
                for tree_path in tree_paths
            ),
            cwd=module_dir,
            mode="newline_terminated_bytes",
        )
        if depth == 0:
            # Stop at the root tree.
            [root_tree_sha1] = tree_sha1s
            break
        # The trees themsevles are now objects for their parents 1 level up.
        for tree_path, tree_sha1 in zip(tree_paths, tree_sha1s):
            ls_tree_line = b"%b %b %b\t%b" % (
                b"040000", # mode
                b"tree", # type
                tree_sha1, # sha1
                os.path.basename(tree_path), # name
            )
            add_object_to_parent_tree(os.path.dirname(tree_path), ls_tree_line)
    else:
        assert False, "never found the root tree?"

    # Create a commit with this tree, HEAD as the parent,
    # and constant dummy data for everything else.
    dummy_name = "Nobody"
    dummy_email = "nobody@bogus.invalid"
    # This is the earliest timestamp git will accept without an error.
    dummy_date = "100000000 +0000" # Sat Mar 3 09:46:40 1973 +0000
    commit_sha1 = git(
        "-c", "author.name={}".format(dummy_name),
        "-c", "author.email={}".format(dummy_email),
        "-c", "committer.name={}".format(dummy_name),
        "-c", "committer.email={}".format(dummy_email),
        "commit-tree",
        root_tree_sha1,
        "-p", head_commit_sha1.decode("utf8"),
        "-m", "(auto generated)",
        env_updates={
            "GIT_AUTHOR_DATE": dummy_date,
            "GIT_COMMITTER_DATE": dummy_date,
        },
        cwd=module_dir,
        mode="single_line_bytes")

    return commit_sha1

def git(*args, cwd, mode, input=None, env_updates=None):
    cmd = ["git"]
    cmd.extend(args)

    if env_updates:
        env = os.environ.copy()
        env.update(env_updates)
    else:
        env=None

    if mode == "mutating":
        assert input == None
        if verbose:
            shell_script = " ".join(shlex.quote(arg) for arg in cmd)
            if env_updates:
                shell_script = " ".join(
                    "{}={}".format(shlex.quote(name), shlex.quote(value))
                    for name, value in sorted(env_updates.items())
                ) + " " + shell_script
            if cwd != None:
                shell_script = "(cd {} && {})".format(shlex.quote(cwd), shell_script)
            if dry_run:
                shell_script = "# " + shell_script
            print(shell_script)
        if not dry_run:
            subprocess.check_call(cmd, cwd=cwd, env=env)
        return None

    # read-only or otherwise no-observable-change command.
    output = subprocess.check_output(cmd, cwd=cwd, input=input, env=env)
    if mode == "single_line_bytes":
        lines = output.split(b"\n")
        assert lines[-1] == b""
        [line] = lines[:-1]
        return line
    if mode == "single_line":
        lines = output.decode("utf8").split("\n")
        assert lines[-1] == ""
        [line] = lines[:-1]
        return line
    elif mode == "null_terminated_bytes":
        lines = output.split(b"\x00")
        assert lines[-1] == b""
        return lines[:-1]
    elif mode == "newline_terminated_bytes":
        lines = output.split(b"\n")
        assert lines[-1] == b""
        return lines[:-1]
    else:
        assert False, mode

def relpath_down(path, start):
    """
    like os.path.relpath, but returns None if the path would go ../up.
    """
    path = os.path.abspath(path)
    start = os.path.abspath(start)
    try:
        common_prefix = os.path.commonpath([path, start])
    except ValueError:
        # Different drives in Windows or something.
        return None
    if start != os.path.commonpath([start, common_prefix]):
        # The common path is above the start dir, so this would need to go ../up.
        return None
    return os.path.relpath(path, start)

if __name__ == "__main__":
    main()
